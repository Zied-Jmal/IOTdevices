[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ManagerMQTT",
        "importPath": "src.managers.mqtt_manager.MQTTManager",
        "description": "src.managers.mqtt_manager.MQTTManager",
        "isExtraImport": true,
        "detail": "src.managers.mqtt_manager.MQTTManager",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "importPath": "src.modules.database_modules.database",
        "description": "src.modules.database_modules.database",
        "isExtraImport": true,
        "detail": "src.modules.database_modules.database",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "importPath": "src.modules.database_modules.database",
        "description": "src.modules.database_modules.database",
        "isExtraImport": true,
        "detail": "src.modules.database_modules.database",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "importPath": "src.modules.database_modules.database",
        "description": "src.modules.database_modules.database",
        "isExtraImport": true,
        "detail": "src.modules.database_modules.database",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "ConfigMQTT",
        "importPath": "src.modules.mqtt_modules.config_mqtt",
        "description": "src.modules.mqtt_modules.config_mqtt",
        "isExtraImport": true,
        "detail": "src.modules.mqtt_modules.config_mqtt",
        "documentation": {}
    },
    {
        "label": "ConfigMQTT",
        "importPath": "src.modules.mqtt_modules.config_mqtt",
        "description": "src.modules.mqtt_modules.config_mqtt",
        "isExtraImport": true,
        "detail": "src.modules.mqtt_modules.config_mqtt",
        "documentation": {}
    },
    {
        "label": "DataWriter",
        "importPath": "src.services.database_services.writer_database",
        "description": "src.services.database_services.writer_database",
        "isExtraImport": true,
        "detail": "src.services.database_services.writer_database",
        "documentation": {}
    },
    {
        "label": "MQTTService",
        "importPath": "src.services.mqtt_services.mqtt_service",
        "description": "src.services.mqtt_services.mqtt_service",
        "isExtraImport": true,
        "detail": "src.services.mqtt_services.mqtt_service",
        "documentation": {}
    },
    {
        "label": "DataWriterService",
        "importPath": "src.services.database_services.mongo_service_with_many_data_schemas_and_specifics_topics",
        "description": "src.services.database_services.mongo_service_with_many_data_schemas_and_specifics_topics",
        "isExtraImport": true,
        "detail": "src.services.database_services.mongo_service_with_many_data_schemas_and_specifics_topics",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "UpdateOne",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "ASCENDING",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "CollectionInvalid",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "paho.mqtt.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paho.mqtt.client",
        "description": "paho.mqtt.client",
        "detail": "paho.mqtt.client",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "based on your project structure",
        "importPath": "src.modules.database_modules.database import MongoDBClient  # Adjust",
        "description": "src.modules.database_modules.database import MongoDBClient  # Adjust",
        "isExtraImport": true,
        "detail": "src.modules.database_modules.database import MongoDBClient  # Adjust",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "PublishRequest",
        "kind": 6,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "class PublishRequest(BaseModel):\n    topic: str\n    payload: str\nclass ConfigRequest(BaseModel):\n    key: str\n    value: str\nclass NestedConfigRequest(BaseModel):\n    section: str\n    key: str\n    value: str",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "ConfigRequest",
        "kind": 6,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "class ConfigRequest(BaseModel):\n    key: str\n    value: str\nclass NestedConfigRequest(BaseModel):\n    section: str\n    key: str\n    value: str\nclass QosEnum(int, Enum):\n    low = 0\n    medium = 1",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "NestedConfigRequest",
        "kind": 6,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "class NestedConfigRequest(BaseModel):\n    section: str\n    key: str\n    value: str\nclass QosEnum(int, Enum):\n    low = 0\n    medium = 1\n    high = 2\n#! Red (!)\n# ? Blue (?)",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "QosEnum",
        "kind": 6,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "class QosEnum(int, Enum):\n    low = 0\n    medium = 1\n    high = 2\n#! Red (!)\n# ? Blue (?)\n# * Green (*)\n# ^ Yellow (^)\n# & Pink (&)\n# ~ Purple (~)",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "SubSchema",
        "kind": 6,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "class SubSchema(BaseModel):\n    collection: str\n    devices: List[str]\n    topics: List[str]\n    data_mapping: Dict[str, str]\nclass Schema(BaseModel):\n    database: str\n    sub_schemas: List[SubSchema]\nclass SchemaUpdate(BaseModel):\n    database: Optional[str]",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "Schema",
        "kind": 6,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "class Schema(BaseModel):\n    database: str\n    sub_schemas: List[SubSchema]\nclass SchemaUpdate(BaseModel):\n    database: Optional[str]\n    sub_schemas: Optional[List[SubSchema]]\n# CRUD operations\n@app.post(\"/schemas/\", response_model=Dict[str, Any])\ndef create_schema(schema: Schema):\n    if db[\"schemas\"].find_one({\"database\": schema.database}):",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "SchemaUpdate",
        "kind": 6,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "class SchemaUpdate(BaseModel):\n    database: Optional[str]\n    sub_schemas: Optional[List[SubSchema]]\n# CRUD operations\n@app.post(\"/schemas/\", response_model=Dict[str, Any])\ndef create_schema(schema: Schema):\n    if db[\"schemas\"].find_one({\"database\": schema.database}):\n        raise HTTPException(\n            status_code=400, detail=\"Schema with this database already exists\"\n        )",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "create_schema",
        "kind": 2,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "def create_schema(schema: Schema):\n    if db[\"schemas\"].find_one({\"database\": schema.database}):\n        raise HTTPException(\n            status_code=400, detail=\"Schema with this database already exists\"\n        )\n    result = db[\"schemas\"].insert_one(schema.model_dump())\n    return {\"inserted_id\": str(result.inserted_id)}\n@app.get(\"/schemas/\", response_model=List[Dict[str, Any]])\ndef read_schemas():\n    schemas = list(db[\"schemas\"].find())",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "read_schemas",
        "kind": 2,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "def read_schemas():\n    schemas = list(db[\"schemas\"].find())\n    for schema in schemas:\n        schema[\"_id\"] = str(schema[\"_id\"])\n    return schemas\n@app.get(\"/schemas/{database}\", response_model=Dict[str, Any])\ndef read_schema(database: str):\n    schema = db[\"schemas\"].find_one({\"database\": database})\n    if schema:\n        schema[\"_id\"] = str(schema[\"_id\"])",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "read_schema",
        "kind": 2,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "def read_schema(database: str):\n    schema = db[\"schemas\"].find_one({\"database\": database})\n    if schema:\n        schema[\"_id\"] = str(schema[\"_id\"])\n        return schema\n    raise HTTPException(status_code=404, detail=\"Schema not found\")\n@app.put(\"/schemas/{database}\", response_model=Dict[str, Any])\ndef update_schema(database: str, schema_update: SchemaUpdate):\n    update_data = {k: v for k, v in schema_update.model_dump().items() if v is not None}\n    if update_data:",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "update_schema",
        "kind": 2,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "def update_schema(database: str, schema_update: SchemaUpdate):\n    update_data = {k: v for k, v in schema_update.model_dump().items() if v is not None}\n    if update_data:\n        result = db[\"schemas\"].update_one({\"database\": database}, {\"$set\": update_data})\n        if result.matched_count == 1:\n            return db[\"schemas\"].find_one({\"database\": database})\n    raise HTTPException(status_code=404, detail=\"Schema not found or no changes made\")\n@app.delete(\"/schemas/{database}\", response_model=Dict[str, Any])\ndef delete_schema(database: str):\n    result = db[\"schemas\"].delete_one({\"database\": database})",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "delete_schema",
        "kind": 2,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "def delete_schema(database: str):\n    result = db[\"schemas\"].delete_one({\"database\": database})\n    if result.deleted_count == 1:\n        return {\"deleted_database\": database}\n    raise HTTPException(status_code=404, detail=\"Schema not found\")",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "app = FastAPI()\nmanager = ManagerMQTT()\n# ------------------------------------------------------------------------------\n# request_body\n# ------------------------------------------------------------------------------\nclass PublishRequest(BaseModel):\n    topic: str\n    payload: str\nclass ConfigRequest(BaseModel):\n    key: str",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "manager",
        "kind": 5,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "manager = ManagerMQTT()\n# ------------------------------------------------------------------------------\n# request_body\n# ------------------------------------------------------------------------------\nclass PublishRequest(BaseModel):\n    topic: str\n    payload: str\nclass ConfigRequest(BaseModel):\n    key: str\n    value: str",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "client = manager.client\ndb = client[\"schemas_config\"]\n# Pydantic models\nclass SubSchema(BaseModel):\n    collection: str\n    devices: List[str]\n    topics: List[str]\n    data_mapping: Dict[str, str]\nclass Schema(BaseModel):\n    database: str",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "src.api.config_api",
        "description": "src.api.config_api",
        "peekOfCode": "db = client[\"schemas_config\"]\n# Pydantic models\nclass SubSchema(BaseModel):\n    collection: str\n    devices: List[str]\n    topics: List[str]\n    data_mapping: Dict[str, str]\nclass Schema(BaseModel):\n    database: str\n    sub_schemas: List[SubSchema]",
        "detail": "src.api.config_api",
        "documentation": {}
    },
    {
        "label": "Metadata",
        "kind": 6,
        "importPath": "src.api.extract_data_api",
        "description": "src.api.extract_data_api",
        "peekOfCode": "class Metadata(BaseModel):\n    database: str\n    device_name: str\n    path: str\n    type: str\nclass DataPoint(BaseModel):\n    timestamp: datetime\n    metadata: Dict[str, Any]\n    data: Dict[str, Any]\n@app.get(\"/test_query\")",
        "detail": "src.api.extract_data_api",
        "documentation": {}
    },
    {
        "label": "DataPoint",
        "kind": 6,
        "importPath": "src.api.extract_data_api",
        "description": "src.api.extract_data_api",
        "peekOfCode": "class DataPoint(BaseModel):\n    timestamp: datetime\n    metadata: Dict[str, Any]\n    data: Dict[str, Any]\n@app.get(\"/test_query\")\nasync def test_query(\n    database: str = Query(..., description=\"Name of the database\"),\n    collection: str = Query(..., description=\"Name of the collection\"),\n):\n    coll = get_collection(database, collection)",
        "detail": "src.api.extract_data_api",
        "documentation": {}
    },
    {
        "label": "get_collection",
        "kind": 2,
        "importPath": "src.api.extract_data_api",
        "description": "src.api.extract_data_api",
        "peekOfCode": "def get_collection(database: str, collection: str):\n    db = client[database]\n    return db[collection]\nclass Metadata(BaseModel):\n    database: str\n    device_name: str\n    path: str\n    type: str\nclass DataPoint(BaseModel):\n    timestamp: datetime",
        "detail": "src.api.extract_data_api",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.api.extract_data_api",
        "description": "src.api.extract_data_api",
        "peekOfCode": "logger = logging.getLogger(__name__)\napp = FastAPI()\n# MongoDB connection setup\nclient = MongoDBClient.get_client()\ndef get_collection(database: str, collection: str):\n    db = client[database]\n    return db[collection]\nclass Metadata(BaseModel):\n    database: str\n    device_name: str",
        "detail": "src.api.extract_data_api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.api.extract_data_api",
        "description": "src.api.extract_data_api",
        "peekOfCode": "app = FastAPI()\n# MongoDB connection setup\nclient = MongoDBClient.get_client()\ndef get_collection(database: str, collection: str):\n    db = client[database]\n    return db[collection]\nclass Metadata(BaseModel):\n    database: str\n    device_name: str\n    path: str",
        "detail": "src.api.extract_data_api",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "src.api.extract_data_api",
        "description": "src.api.extract_data_api",
        "peekOfCode": "client = MongoDBClient.get_client()\ndef get_collection(database: str, collection: str):\n    db = client[database]\n    return db[collection]\nclass Metadata(BaseModel):\n    database: str\n    device_name: str\n    path: str\n    type: str\nclass DataPoint(BaseModel):",
        "detail": "src.api.extract_data_api",
        "documentation": {}
    },
    {
        "label": "ManagerMQTT",
        "kind": 6,
        "importPath": "src.managers.mqtt_manager.MQTTManager",
        "description": "src.managers.mqtt_manager.MQTTManager",
        "peekOfCode": "class ManagerMQTT:\n    def __init__(self):\n        self.thread = None\n        self.running = False\n        self.message_queue = queue.Queue()\n        self.instances = {}\n        self.client = MongoDBClient.get_client()\n        self.config_db = self.client[\"config_db\"]\n        self.load_existing_instances()\n        self.data_writer = DataWriterService()",
        "detail": "src.managers.mqtt_manager.MQTTManager",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "kind": 6,
        "importPath": "src.modules.database_modules.database",
        "description": "src.modules.database_modules.database",
        "peekOfCode": "class MongoDBClient:\n    _client = None\n    @staticmethod\n    def get_client():\n        if MongoDBClient._client is None:\n            MongoDBClient._client = MongoClient(\"mongodb://localhost:27017/\")\n        return MongoDBClient._client\n    @staticmethod\n    def get_template(collection_name):\n        client = MongoDBClient.get_client()",
        "detail": "src.modules.database_modules.database",
        "documentation": {}
    },
    {
        "label": "ConfigMQTT",
        "kind": 6,
        "importPath": "src.modules.mqtt_modules.config_mqtt",
        "description": "src.modules.mqtt_modules.config_mqtt",
        "peekOfCode": "class ConfigMQTT:\n    def __init__(self, db, collection_name):\n        # self.config_json = config_json\n        # self.config_data = self.config_json.load()\n        self.collection_name = collection_name\n        self.collection = db[collection_name]\n        self.config_data = self.load()\n    def load(self):\n        # Load the config from MongoDB\n        config = self.collection.find_one({})",
        "detail": "src.modules.mqtt_modules.config_mqtt",
        "documentation": {}
    },
    {
        "label": "testConfig",
        "kind": 5,
        "importPath": "src.modules.mqtt_modules.config_mqtt",
        "description": "src.modules.mqtt_modules.config_mqtt",
        "peekOfCode": "testConfig = ConfigMQTT(ConfigJson(\"test_config.json\"))\ntestConfig.create_template()\ntestConfig.insert_value(\"broker_address\", \"mqdtt.eclipseprojects.io\")\nprint(testConfig.get_value(\"broker_address\"))\nprint(testConfig.get_value(\"topics\"))\ntestConfig.insert_value(\"topics\", \"mqdtt.eclipseprojects.ios\")\ntestConfig.insert_nested_value(\"settings\", \"keep_alive\", value=\"10\")\nprint(testConfig.get_nested_value(\"settings\", \"keep_alive\"))\n\"\"\"\n\"\"\" def get_one_string_variable_by_name(self, name):",
        "detail": "src.modules.mqtt_modules.config_mqtt",
        "documentation": {}
    },
    {
        "label": "DataWriterService",
        "kind": 6,
        "importPath": "src.services.database_services.mongo_service_with_many_data_schemas_and_specifics_topics",
        "description": "src.services.database_services.mongo_service_with_many_data_schemas_and_specifics_topics",
        "peekOfCode": "class DataWriterService:\n    def __init__(self):\n        self.client = MongoDBClient.get_client()\n        # Load schemas from MongoDB\n        self.schemas_cursor = self.client[\"schemas_config\"][\"schemas\"].find()\n        self.schemas = list(\n            self.schemas_cursor\n        )  # Convert cursor to list for easier access\n    def create_time_series_collection(\n        self, db_name, collection_name, time_field, meta_field, granularity=\"seconds\"",
        "detail": "src.services.database_services.mongo_service_with_many_data_schemas_and_specifics_topics",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.services.database_services.mongo_service_with_many_data_schemas_and_specifics_topics",
        "description": "src.services.database_services.mongo_service_with_many_data_schemas_and_specifics_topics",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DataWriterService:\n    def __init__(self):\n        self.client = MongoDBClient.get_client()\n        # Load schemas from MongoDB\n        self.schemas_cursor = self.client[\"schemas_config\"][\"schemas\"].find()\n        self.schemas = list(\n            self.schemas_cursor\n        )  # Convert cursor to list for easier access\n    def create_time_series_collection(",
        "detail": "src.services.database_services.mongo_service_with_many_data_schemas_and_specifics_topics",
        "documentation": {}
    },
    {
        "label": "DataWriter",
        "kind": 6,
        "importPath": "src.services.database_services.writer_database",
        "description": "src.services.database_services.writer_database",
        "peekOfCode": "class DataWriter:\n    def __init__(self):\n        self.client = MongoDBClient.get_client()\n        self.db = self.client[\"my_databaseEM\"]\n        self.collection_cache = {}\n    def get_value(self,data, path):\n        keys = re.split(r'\\.|\\[|\\]\\[|\\]', path)\n        keys = [key for key in keys if key]  # Remove empty strings\n        for key in keys:\n            if key.isdigit():",
        "detail": "src.services.database_services.writer_database",
        "documentation": {}
    },
    {
        "label": "MQTTService",
        "kind": 6,
        "importPath": "src.services.mqtt_services.mqtt_service",
        "description": "src.services.mqtt_services.mqtt_service",
        "peekOfCode": "class MQTTService:\n    def __init__(self, ConfigMQTT, message_queue):\n        self.ConfigMQTT = ConfigMQTT\n        self.client = mqtt.Client(\n            mqtt.CallbackAPIVersion.VERSION2,\n            client_id=self.ConfigMQTT.get_value(\"client_id\"),\n        )\n        self.running = False\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message",
        "detail": "src.services.mqtt_services.mqtt_service",
        "documentation": {}
    },
    {
        "label": "run_server_config",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def run_server_config(port):\n    from src.api.config_api import (\n        app,\n    )  # Replace 'your_fastapi_app' with the name of your FastAPI script without the .py extension\n    uvicorn.run(app, host=\"0.0.0.0\", port=port)\ndef run_server_extract(port):\n    from src.api.extract_data_api import (\n        app,\n    )  # Replace 'your_fastapi_app' with the name of your FastAPI script without the .py extension\n    uvicorn.run(app, host=\"0.0.0.0\", port=port)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "run_server_extract",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def run_server_extract(port):\n    from src.api.extract_data_api import (\n        app,\n    )  # Replace 'your_fastapi_app' with the name of your FastAPI script without the .py extension\n    uvicorn.run(app, host=\"0.0.0.0\", port=port)\nif __name__ == \"__main__\":\n    port1 = 8001\n    port2 = 8002\n    # Create two processes to run two instances of the FastAPI app on different ports\n    p1 = multiprocessing.Process(target=run_server_config, args=(port1,))",
        "detail": "main",
        "documentation": {}
    }
]